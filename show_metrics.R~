# This script is dedicated to analyze scraped Airbnb webpages in order
# to provide some insights about Airbnb pricing, Airbnb location and
# even daily monitor dashboards. 

library(dplyr)
library(ggplot2)
library(RgoogleMaps)
library(ggmap)
library(ggrepel)
library(maps)
library(sp)
library(gstat)
library(gridExtra)
library(RPostgreSQL)
library(reshape2)
library(xtable)

kCityName <- "Houston TX"
kCityNameUnderscored <- gsub(" ", "-", kCityName)
kZoom <- 11
kMonthDays <- 30
kProjectDir <- "/media/sean/disk2/desktop/airbnb-invest"
kPlotDir <- file.path(kProjectDir, paste0("plot/", kCityNameUnderscored))
kDailyFilename <- sprintf("data/%s_15_pages_daily.csv", kCityNameUnderscored)
kSearchFilename <- sprintf("data/%s_15_pages_search.csv", kCityNameUnderscored)
setwd(kProjectDir)

system(paste0("mkdir -p ", kPlotDir))


datDaily <- read.csv(kDailyFilename)
datDaily$date <- as.Date(datDaily$date)

datSearch <- read.csv(kSearchFilename)
datSearch$base_rate <- datSearch$rate
datSearch$rate <- NULL


# Utils
simpleCap <- function(x) {
    s <- strsplit(x, " ")[[1]]
    paste(toupper(substring(s, 1,1)), substring(s, 2),
          sep="", collapse=" ")
}

simpleUnderscore <- function(x) {
    return(sub(" ", "_", tolower(x)))
}


# Evaluation Plots

plotRateQuantileByDay <- function(percent) {
    # Function that plot rate by date. For given date, it calculates all quantiles
    # for given percentiles in the given listing rates on that day.
    #
    # Takeaways:
    #     1. Shows the rate trends for each percentile. Each percentile could be
    #        treated as listings at certain quality tier.
    #     2. Percentile is relatively robust to outliers.

    title = "rate quantile by day"
    percent.truncated = round(percent, 2)
    colNames = paste0("quantile", floor(100 * percent.truncated))
    dat <- datDaily %>%
        group_by(date) %>%
        do(as.data.frame(as.list(quantile(.$rate, percent.truncated))))
    colnames(dat) <- c("date", colNames)
    dat.melted <- melt(dat, id.vars = c("date"))
    g <- ggplot(aes(x = date, y = value, col = variable), data = dat.melted) +
        geom_line() +
        ggtitle(simpleCap(title))
    ggsave(filename = file.path(kPlotDir, paste0(simpleUnderscore(title), ".png")), g,
           width = 20, height = 10)
}

getLikeliForFTL <- function() {
    # Get likelihood for each listing on whether it's a full time listing or not.
}

plotOcpyByDay <- function() {
    # Get empirical occupancy rate by day.
    #
    # Goal:
    #     1. variation of occupancy rate by day of week.

    title = "Average Occupied Days By Day"
    datGrouped <- datDaily %>%
        group_by(date) %>%
        summarise(occupancy_rate = mean(ifelse(availability == "False", 1, 0)),
                  occupied_days = kMonthDays * occupancy_rate)

    g <- ggplot(aes(x = date, y = occupied_days), data = datGrouped) +
        geom_line() +
        geom_abline(intercept = kMonthDays) +
        ggtitle(simpleCap(title)) +
        scale_y_continuous(limits = c(0, kMonthDays))

    
}
plotRateRandomByDay <- function(k) {
    # Same as plotRateQuantileByDay except we pick k random listings from the pool
    # so as to illustrate the pattern of rate trend of actual listings. 
}

bucketizeByRatePercentile <- function(percent) {
    # The purpose of this function is to give you a better understanding of listings
    # at each percentile level by showing you all the listing IDs at that level. It
    # lets you evaluate the predicted daily rate of your potential property by putting
    # it to the right bucket.
}

bucketizeByOcpyPrecentile <- function(percent) {
    # Same as bucketizeByRatePerentile except you look at occupancy this time.
}

getListingTable <- function() {
    
    datGrouped <- datDaily %>%
        group_by(listing_id) %>%
        summarise(rate = mean(rate),
                  occupancy_rate = mean(ifelse(availability == "False", 1, 0)),
                  occupied_days = kMonthDays * occupancy_rate)
    result <- merge(datSearch, datGrouped, all = TRUE)
    return(result)
}

showListingTable <- function() {
    # Show features per listing in a tabular form.

    title <- "Listing Table"
    result <- getListingTable()
    resultXtable <- xtable(result, caption = title)
    print(resultXtable, file = paste0(kPlotDir, "/", simpleUnderscore(title), ".html"),
          type = "html")
}

showSummaryStats <- function(percent) {
    # Show a bunch of tables
    #
    # Tables to Show:
    #     1. Quantile of rate
    #     2. Quantile of occupied days and occupancy rate
    #     3. Quantile of monthly gross income

    title <- "Summary Statistics"
    dat <- getListingTable()
    result <- dat %>%
        do(data.frame(percent = percent,
                         rate = quantile(.$rate, percent, names = FALSE),
                         occupied_days = quantile(.$occupied_days, percent, names = FALSE),
                         occupancy_rate = quantile(.$occupancy_rate, percent, names = FALSE),
                         monthly_income = quantile(.$occupied_days * .$rate, percent, names = FALSE)))
    resultXtable <- xtable(result, caption = title)
    print(resultXtable, file = paste0(kPlotDir, "/", simpleUnderscore(title), ".html"),
          type = "html")
}

showMapPlots <- function(zoom = 11) {
    title = sprintf("Rate and Occupancy Map with Zoom %s", zoom)
    center <- t(us.cities[us.cities$name == kCityName, c('lat', 'long')])
    dat <- getListingTable()
    
    midRate <- median(dat$rate)
    rateLimits <- c(0, 2 * midRate)
    midOccupancy <- median(dat$occupied_days)
    occupancyLimits <- c(max(0, 2 * midOccupancy - kMonthDays),
                         min(kMonthDays, 2 * midOccupancy))
    map <- get_googlemap(center = center[2:1], zoom = zoom, maptype = 'roadmap')

    # Rate
    gg1 <- ggplot(aes(y = latitude, x = longitude, color = rate), data = dat)
    
    g1 <- ggmap(map, base_layer = gg1, alpha = 0.1, darken = c(0.2, 'black')) +
        geom_point(alpha = 1, size = 3) +
        scale_colour_gradient2(midpoint = midRate,
                               low = 'blue', high = 'red', mid = 'white',
                               limits = rateLimits) +
        theme(legend.position = 'top',
              legend.key.width = unit(2, 'cm'))

    # Occupied Days
    gg2 <- ggplot(data = dat, aes(y = latitude, x = longitude, color = occupied_days))
    g2 <- ggmap(map, base_layer = gg2, alpha = 0.1, darken = c(0.3, 'black')) +
        geom_point(alpha = 1, size = 3) +
        scale_colour_gradient2(midpoint = midOccupancy,
                               low = 'blue', high = 'red', mid = 'white',
                               limits = occupancyLimits) +
        theme(legend.position = 'top',
              legend.key.width = unit(2, 'cm'))

    g <- grid.arrange(g1, g2, ncol = 2)
    ggsave(filename = file.path(kPlotDir, paste0(simpleUnderscore(title), ".png")), g,
           width = 16, height = 8)
}


plotRateToOccupiedDays <- function(ylimits = c(NA, 250)) {
    g <- ggplot(aes(x = occupied_days, y = rate, label = listing_id), data = dailyAggr) +
        geom_point() +
        geom_text(hjust = 0, nudge_x = 0.1) +
        scale_y_continuous(limits = ylimits) +
        ggtitle("Daily Rate VS Occupied Days")
    return(g)
}

main <- function() {
    plotRateQuantileByDay(seq(0.1, 0.9, by = 0.1))
    showListingTable()
    showSummaryStats(seq(0.1, 0.9, by = 0.1))
    showMapPlots(zoom = 10)
    ## showMapPlots(zoom = 11)
    ## showMapPlots(zoom = 12)
    
    
}

main()
